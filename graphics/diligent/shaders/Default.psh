#include "Interface/Common.hlsl"
#include "Interface/Lights.hlsl"
#include "Interface/Material.hlsl"
#include "Utils/BRDFs.hlsl"

struct PSInput { 
    float4 Pos          : SV_POSITION;
    float3 WorldPos     : POSITION;
    float3 Normal       : NORMAL;
    float2 UV           : TEXCOORD0;
};

cbuffer cbuf_InstanceData {
    StaticInstanceData gInstanceData;
};

cbuffer cbuf_SceneGlobals {
    SceneGlobals gGlobals;
};

cbuffer cbuf_MaterialData {
    MaterialDesc gMaterial;
};

StructuredBuffer<LightAttribs> sbuf_Lights;

Texture2D    t_Albedo;
SamplerState t_Albedo_sampler;

void main(in PSInput ps_input,
            out PixelData ps_output)
{
    float4 albedo_sample = t_Albedo.Sample(
        t_Albedo_sampler, 
        ps_input.UV);

    float3 albedo = albedo_sample.xyz;
    float3 eyeDirOut = normalize(gGlobals.mCamera.mPosition - ps_input.WorldPos);

    // Gather all indirect lighting contributions
    albedo = albedo * gMaterial.mAlbedoFactor;

    float metalness = gMaterial.mMetallicFactor;
    float roughness = gMaterial.mRoughnessFactor;
    float3 color = float3(0.0, 0.0, 0.0);

    if (gMaterial.mMaterialType == MATERIAL_TYPE_FLAT) {
        color = albedo;
    } else {

        // Gather all direct lighting contributions
        uint numStructs, stride;
        sbuf_Lights.GetDimensions(numStructs, stride);
        for (int i = 0; i < numStructs; ++i) {

            if (sbuf_Lights[i].mLightType == HLSL_LIGHT_TYPE_NONE)
                continue;

            LightSurfaceInfo lightInfo;
            GetLightInfo(sbuf_Lights[i], ps_input.WorldPos, lightInfo);

            BRDFInput input;
            input.mAlbedo = albedo;
            input.mMetalness = metalness;
            input.mNormal = ps_input.Normal;
            input.mRoughness = roughness;
            input.mEyeDirOut = eyeDirOut;
            input.mLightDirIn = lightInfo.mDirIn;
            input.mRadiance = lightInfo.mRadianceFalloff * sbuf_Lights[i].mIrradiance;
            input.mSpecularPower = 1.0 + (1.0 - roughness) * (gMaterial.mSpecularPower - 1.0);
            input.mSpecularColor = float3(1.0, 1.0, 1.0);
            input.mMaterialType = gMaterial.mMaterialType;

            color += DirectContribution(input);
        }
    }

    // Output all relevant shader data
    ps_output.mColor = float4(color, 1.0);
    ps_output.mDepth = ps_input.Pos.z / ps_input.Pos.w;
    ps_output.mAlbedo = albedo;
    ps_output.mUV = ps_input.UV;
    ps_output.mNormal = ps_input.Normal;
    ps_output.mRoughness = roughness;
    ps_output.mMetallic = metalness;
    ps_output.mEntity = gInstanceData.mEntity;
}